find.package ("devtools")
install.packages ("devtools")
find_rtools()
library(devtools)
find_rtools()
install.package(KernSmooth)
install.package("KernSmooth")
install.packages("KernSmooth")
copyright
library(KernSmooth)
install.packages("swirl")
getwd()
sqr = seq(1, 100 by=2)
sqr.squared = NULL
for (n in 1:50)
{
sqr.squared[n] = sqr[n]^2
}
sqr <- seq(1, 100 by=2)
sqr <- seq(1, 100, by=2)
sqr.squared <- NULL
for (n in 1:50)
{
sqr.squared[n] = sqr[n]^2
}
sqr.squared
sqr
for(i in 1:10){print(i)}
x <- c("a", "b", "c", "d")
for(i in 1:4) {
print(x[i])
}
x <- c("a", "b", "c", "d")
for(i in 1:5) {
print(x[i])
}
for(letter in x) {
print(letter)
}
x <- matrix(1:6, 2, 3)
for(i in seq_len(nrow(x))) {
for(j in seq_len(ncol(x))) {
print(x[i, j])
}
}
x <- matrix(1:6, 2, 3)
for(i in seq_len(nrow(x))) {
for(j in seq_len(ncol(x))) {
print(x[i])
}
}
x <- matrix(1:6, 2, 3)
for(i in seq_len(nrow(x))) {
for(j in seq_len(ncol(x))) {
print(x[j])
}
}
y <- function(x)
?makevector
?makeVector
a <- a:d
a <- c(a:d)
a <- matrix()
a <- c(a:d)
a <- c(A:D)
a <- c(A, B, C, D)
a <- matrix(data=NA, nrow=2, ncol=2)
a <- c(A, B, C, D)
a <- c(A, B, C, D)
a <- c(a, b, c, d)
a <- matrix(data=c(a,b,c,d), nrow=2, ncol=2)
a <- matrix(data=c(1:4), nrow=2, ncol=2)
inverse(a)
solve(a)
setmean <- function(mean)  { m <- mean }
setmean(8)
setmean
a <- mean
myObj <- list(makeVector(sample(0:1000,100,replace=T)))
source('~/.active-rstudio-document')
myObj <- list(makeCacheMatrix(sample(0:1000,100,replace=T)))
cacheSolve(miobj)
cacheSolve(myobj)
set <- function(y) {
x <<- y
m <<- NULL
}
set(1)
source('~/.active-rstudio-document')
cacheSolve(myobj)
myObj <- list(makeCacheMatrix(sample(0:1000,100,replace=T)))
myobj <- makeCacheMatrix(1:20)
rm(myobj)
rm(myobj)
z <- makeCacheMatrix(1:20)
cacheSolve(z)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
z <- makeCacheMatrix(1:20)
cacheSolve(z)
makeCacheMatrix <- function(x = matrix(nrow=sqrt(length(x), ncol=sqrt(length(x))))) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(inverse) m <<- inverse
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
makeCacheMatrix(x)
makeCacheMatrix(1:20)
source('F:/Coursera/R/programmingassignment2/cachematrix.R')
cacheSolve(1:20)
traceback()
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
traceback()
x <- 1:20
dim(x)<- c(sqrt(length(x), sqrt(length(x))))
dim(x)<- c(sqrt(length(x)), sqrt(length(x))))
dim(x)<- c(sqrt(length(x)), sqrt(length(x)))
length(x)
sqr(20)
sqrt(20)
sqrt(x)
sqrt(length(x)
)
solve(x)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
makeCacheMatrix(1:20)
source('~/.active-rstudio-document')
makeCacheMatrix(1:20)
source('~/.active-rstudio-document')
makeCacheMatrix(1:20)
?dim
source('~/.active-rstudio-document')
makeCacheMatrix(1:20)
source('~/.active-rstudio-document')
makeCacheMatrix(1:20)
class(x)
x <- diagonalmatrix
diag(x)
diag(x, nrow=4)
y <- sqrt(length(x))
dim(x)<- nrow=y
source('~/.active-rstudio-document')
makeCacheMatrix(1:20)
source('~/.active-rstudio-document')
makeCacheMatrix(1:20)
cachesolve(1:20)
cacheSolve(1:20)
x=diagonal
source('~/.active-rstudio-document')
cacheSolve(1:20)
makeCacheMatrix(1:20)
cacheSolve(1:20)
x <- diagnoalmatrix(1:20)
c(1:20) -> x(diagonalmatrix)
source('~/.active-rstudio-document')
cacheSolve(1:20)
makeCacheMatrix(1:20)
cacheSolve(1:20)
det(x)
x <- matrix(x)
x <- matrix(x, nrow=y)
det(x)
rm(x)
x <- matrix(1:9)
det(x)
y <- sqrt(length(x))
x <- matrix(x, nrow=y)
det(x)
solve(x)
x <- matrix(1:1000)
y <- sqrt(length(x))
x <- matrix(x, nrow=y)
solve(x)
x <- matrix(x, nrow=y)
solve(x)
x <- matrix(x, nrow=y, ncol=y)
solve(x)
x <- matrix(rnorm(1000)
)
x <- matrix(x, nrow=y, ncol=y)
y <- sqrt(length(x))
x <- matrix(x, nrow=y, ncol=y)
solve(x)
source('~/.active-rstudio-document')
makeCacheMatrix(rnorm(300))
source('~/.active-rstudio-document')
makeCacheMatrix(rnorm(300))
cachesolve(x)
cacheSolve(x)
cacheSolve(rnorm(1000))
source('~/.active-rstudio-document')
cacheSolve(rnorm(1000))
traceback()
debug
debug(makeCacheMatrix)
browser
n
setwd("F:/Coursera/R/programmingassignment2")
a <- makeCacheMatrix(1:4)
get
a <- makeCacheMatrix(1:4)
stop
debug
source('~/.active-rstudio-document')
a <- makeCacheMatrix(1:4)
a$get
source('~/.active-rstudio-document')
a <- makeCacheMatrix(1:4)
a$get
a
source('~/.active-rstudio-document')
a$get
a <- makeCacheMatrix(1:4)
a$get
get
a$get()
a$getinverse()
a
a()
